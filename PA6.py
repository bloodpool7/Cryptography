import math
import gmpy2 


# problem 1
N1 = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
A = gmpy2.isqrt(N1) + 1
x = gmpy2.isqrt((A**2) - N1)
p1 = A - x
q1 = A + x
print(p1)
print()

# problem 2 
N = int("""
6484558428080716696628242653467722787263437207069762630604390703787
9730861808111646271401527606141756919558732184025452065542490671989
2428844841839353281972988531310511738648965962582821502504990264452
1008852816733037111422964210278402893076574586452336833570778346897
15838646088239640236866252211790085787877""".replace("\n", ""))

found = False 
count = 1
while(not found):
    A = gmpy2.isqrt(N) + count
    x = gmpy2.isqrt(A**2 - N)
    p = A - x 
    q = A + x
    if (p*q == N):
        found = True
        print(p)
        print()
    count += 1

# problem 3
print("Problem 3: \n")
N3 = int("""
72006226374735042527956443552558373833808445147399984182665305798191
63556901883377904234086641876639384851752649940178970835240791356868
77441155132015188279331812309091996246361896836573643119174094961348
52463970788523879939683923036467667022162701835329944324119217381272
9276147530748597302192751375739387929""".replace("\n", ""))
A3 = gmpy2.isqrt(24 * N3) + 1


x3 = gmpy2.isqrt((A3**2) - (24 * N3))


p3 = (A3-x3)//6 
q3 = (A3+x3)//4

Nprime = p3 * q3

print(p3)


# problem 4 
def find_inverse(a, n):
    r = a 
    oldr = n 
    t = 1
    oldt = 0
    while r > 1: 
        q = oldr // r 
        temp = r 
        r = oldr % r 
        oldr = temp 
        temp = t 
        t = oldt - q * t 
        oldt = temp  
    return t % n

def exponentiate_modular(base, x, modulus):
    out = base
    values = {0 : out}
    logged = int(math.log2(x))
    for i in range(logged):
        out *= out
        out %= modulus
        values[i+1] = out
    difference = x - (2**logged)
    logged_two = int(math.log2(difference)) if difference > 0 else -1
    while logged_two >= 0:
        out *= values[logged_two]
        out %= modulus
        difference = difference - 2**logged_two
        logged_two = int(math.log2(difference)) if difference > 0 else -1
    return out

ct = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
phi_N4 = N1 - p1 - q1 + 1

private_key = find_inverse(65537, phi_N4)
pt = hex(exponentiate_modular(ct, private_key, N1))[2:]
message = pt[pt.find("00") + 2:]
print(bytes.fromhex(message).decode('utf-8'))